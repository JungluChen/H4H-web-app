{"ast":null,"code":"import { create } from 'zustand';\nimport { dummyTasks } from '../data/dummyData';\n// Add dummy profile data\nconst dummyProfile = {\n  name: \"John Doe\",\n  wallet: 6000,\n  achievements: [{\n    id: \"1\",\n    title: \"First Task Complete\",\n    description: \"Completed your first task\",\n    progress: 100,\n    reward: 50,\n    icon: \"🎯\"\n  }, {\n    id: \"2\",\n    title: \"Super Helper\",\n    description: \"Helped 10 people\",\n    progress: 80,\n    reward: 100,\n    icon: \"⭐\"\n  }, {\n    id: \"3\",\n    title: \"Quick Responder\",\n    description: \"Responded to 5 tasks within an hour\",\n    progress: 60,\n    reward: 75,\n    icon: \"⚡\"\n  }],\n  taskHistory: dummyTasks.slice(0, 3),\n  rating: 4.8\n};\n\n// Add this helper function at the top of the file\nconst loadPersistedChats = () => {\n  const savedChats = localStorage.getItem('chats');\n  const savedMessages = localStorage.getItem('chatMessages');\n  return {\n    chats: savedChats ? JSON.parse(savedChats) : [],\n    chatMessages: savedMessages ? JSON.parse(savedMessages) : {}\n  };\n};\n\n// Get persisted data\nconst persistedData = loadPersistedChats();\nexport const useTaskStore = create((set, get) => ({\n  tasks: dummyTasks,\n  chats: persistedData.chats,\n  readMessages: [],\n  profile: dummyProfile,\n  chatMessages: persistedData.chatMessages,\n  addTask: newTask => set(state => ({\n    tasks: [{\n      ...newTask,\n      id: String(state.tasks.length + 1),\n      status: 'open'\n    }, ...state.tasks]\n  })),\n  addChat: newChat => {\n    let createdChat = newChat;\n    set(state => {\n      const existingChat = state.chats.find(chat => chat.sender === newChat.sender && chat.taskTitle === newChat.taskTitle);\n      if (existingChat) {\n        createdChat = existingChat;\n        return state;\n      }\n      const newState = {\n        ...state,\n        chats: [newChat, ...state.chats],\n        chatMessages: {\n          ...state.chatMessages,\n          [newChat.id]: []\n        }\n      };\n\n      // Persist to localStorage\n      localStorage.setItem('chats', JSON.stringify(newState.chats));\n      localStorage.setItem('chatMessages', JSON.stringify(newState.chatMessages));\n      return newState;\n    });\n    return {\n      chats: get().chats,\n      createdChat\n    };\n  },\n  markChatAsRead: chatId => set(state => ({\n    readMessages: [...state.readMessages, chatId],\n    chats: state.chats.map(chat => chat.id === chatId ? {\n      ...chat,\n      unreadCount: 0\n    } : chat)\n  })),\n  addMessage: (chatId, message) => set(state => {\n    const existingMessages = state.chatMessages[chatId] || [];\n    const updatedMessages = [...existingMessages, message];\n    const newState = {\n      ...state,\n      chatMessages: {\n        ...state.chatMessages,\n        [chatId]: updatedMessages\n      },\n      chats: state.chats.map(chat => chat.id === chatId ? {\n        ...chat,\n        message: message.message,\n        timestamp: message.timestamp\n      } : chat).sort((a, b) => {\n        const timeA = new Date(`1970/01/01 ${a.timestamp}`).getTime();\n        const timeB = new Date(`1970/01/01 ${b.timestamp}`).getTime();\n        return timeB - timeA;\n      })\n    };\n\n    // Persist to localStorage\n    localStorage.setItem('chats', JSON.stringify(newState.chats));\n    localStorage.setItem('chatMessages', JSON.stringify(newState.chatMessages));\n    return newState;\n  }),\n  updateChat: (chatId, lastMessage, sender, timestamp) => set(state => {\n    const currentTime = timestamp || new Date().toLocaleTimeString();\n    const updatedChats = state.chats.map(chat => chat.id === chatId ? {\n      ...chat,\n      message: lastMessage,\n      timestamp: currentTime\n    } : chat);\n\n    // Sort chats by timestamp (most recent first)\n    const sortedChats = [...updatedChats].sort((a, b) => {\n      const timeA = new Date(`1970/01/01 ${a.timestamp}`).getTime();\n      const timeB = new Date(`1970/01/01 ${b.timestamp}`).getTime();\n      return timeB - timeA;\n    });\n    const newState = {\n      ...state,\n      chats: sortedChats,\n      chatMessages: state.chatMessages // Keep existing messages\n    };\n\n    // Persist to localStorage\n    localStorage.setItem('chats', JSON.stringify(sortedChats));\n    localStorage.setItem('chatMessages', JSON.stringify(state.chatMessages));\n    return newState;\n  }),\n  getChatMessages: chatId => {\n    const state = get();\n    return state.chatMessages[chatId] || [];\n  }\n}));","map":{"version":3,"names":["create","dummyTasks","dummyProfile","name","wallet","achievements","id","title","description","progress","reward","icon","taskHistory","slice","rating","loadPersistedChats","savedChats","localStorage","getItem","savedMessages","chats","JSON","parse","chatMessages","persistedData","useTaskStore","set","get","tasks","readMessages","profile","addTask","newTask","state","String","length","status","addChat","newChat","createdChat","existingChat","find","chat","sender","taskTitle","newState","setItem","stringify","markChatAsRead","chatId","map","unreadCount","addMessage","message","existingMessages","updatedMessages","timestamp","sort","a","b","timeA","Date","getTime","timeB","updateChat","lastMessage","currentTime","toLocaleTimeString","updatedChats","sortedChats","getChatMessages"],"sources":["C:/Users/5x/Downloads/EN/src/store/taskStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { dummyTasks, dummyChats, dummyMessages } from '../data/dummyData';\r\nimport { Task, Chat } from '../types';\r\n\r\ninterface Achievement {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  progress: number;\r\n  reward: number;\r\n  icon: string;\r\n}\r\n\r\ninterface Profile {\r\n  name: string;\r\n  wallet: number;\r\n  achievements: Achievement[];\r\n  taskHistory: Task[];\r\n  rating: number;\r\n}\r\n\r\ninterface TaskState {\r\n  tasks: Task[];\r\n  chats: Chat[];\r\n  readMessages: string[];\r\n  profile: Profile;\r\n  chatMessages: Record<string, Chat[]>;\r\n  addTask: (task: Omit<Task, 'id'>) => void;\r\n  addChat: (chat: Chat) => { chats: Chat[], createdChat: Chat };\r\n  markChatAsRead: (chatId: string) => void;\r\n  addMessage: (chatId: string, message: Chat) => void;\r\n  updateChat: (chatId: string, lastMessage: string, sender: string, timestamp?: string) => void;\r\n  getChatMessages: (chatId: string) => Chat[];\r\n}\r\n\r\n// Add dummy profile data\r\nconst dummyProfile: Profile = {\r\n  name: \"John Doe\",\r\n  wallet: 6000,\r\n  achievements: [\r\n    {\r\n      id: \"1\",\r\n      title: \"First Task Complete\",\r\n      description: \"Completed your first task\",\r\n      progress: 100,\r\n      reward: 50,\r\n      icon: \"🎯\"\r\n    },\r\n    {\r\n      id: \"2\",\r\n      title: \"Super Helper\",\r\n      description: \"Helped 10 people\",\r\n      progress: 80,\r\n      reward: 100,\r\n      icon: \"⭐\"\r\n    },\r\n    {\r\n      id: \"3\",\r\n      title: \"Quick Responder\",\r\n      description: \"Responded to 5 tasks within an hour\",\r\n      progress: 60,\r\n      reward: 75,\r\n      icon: \"⚡\"\r\n    }\r\n  ],\r\n  taskHistory: dummyTasks.slice(0, 3),\r\n  rating: 4.8\r\n};\r\n\r\n// Add this helper function at the top of the file\r\nconst loadPersistedChats = () => {\r\n  const savedChats = localStorage.getItem('chats');\r\n  const savedMessages = localStorage.getItem('chatMessages');\r\n  return {\r\n    chats: savedChats ? JSON.parse(savedChats) : [],\r\n    chatMessages: savedMessages ? JSON.parse(savedMessages) : {}\r\n  };\r\n};\r\n\r\n// Get persisted data\r\nconst persistedData = loadPersistedChats();\r\n\r\nexport const useTaskStore = create<TaskState>((set, get) => ({\r\n  tasks: dummyTasks,\r\n  chats: persistedData.chats,\r\n  readMessages: [],\r\n  profile: dummyProfile,\r\n  chatMessages: persistedData.chatMessages,\r\n  addTask: (newTask) => set((state: TaskState) => ({\r\n    tasks: [\r\n      {\r\n        ...newTask,\r\n        id: String(state.tasks.length + 1),\r\n        status: 'open'\r\n      },\r\n      ...state.tasks\r\n    ]\r\n  })),\r\n  addChat: (newChat: Chat) => {\r\n    let createdChat: Chat = newChat;\r\n    \r\n    set((state: TaskState) => {\r\n      const existingChat = state.chats.find(chat => \r\n        chat.sender === newChat.sender && \r\n        chat.taskTitle === newChat.taskTitle\r\n      );\r\n      \r\n      if (existingChat) {\r\n        createdChat = existingChat;\r\n        return state;\r\n      }\r\n      \r\n      const newState = {\r\n        ...state,\r\n        chats: [newChat, ...state.chats],\r\n        chatMessages: {\r\n          ...state.chatMessages,\r\n          [newChat.id]: []\r\n        }\r\n      };\r\n\r\n      // Persist to localStorage\r\n      localStorage.setItem('chats', JSON.stringify(newState.chats));\r\n      localStorage.setItem('chatMessages', JSON.stringify(newState.chatMessages));\r\n      \r\n      return newState;\r\n    });\r\n\r\n    return { chats: get().chats, createdChat };\r\n  },\r\n  markChatAsRead: (chatId: string) => set((state: TaskState) => ({\r\n    readMessages: [...state.readMessages, chatId],\r\n    chats: state.chats.map(chat => \r\n      chat.id === chatId \r\n        ? { ...chat, unreadCount: 0 }\r\n        : chat\r\n    )\r\n  })),\r\n  addMessage: (chatId: string, message: Chat) => set((state: TaskState) => {\r\n    const existingMessages = state.chatMessages[chatId] || [];\r\n    const updatedMessages = [...existingMessages, message];\r\n    \r\n    const newState = {\r\n      ...state,\r\n      chatMessages: {\r\n        ...state.chatMessages,\r\n        [chatId]: updatedMessages\r\n      },\r\n      chats: state.chats.map(chat => \r\n        chat.id === chatId \r\n          ? { \r\n              ...chat, \r\n              message: message.message,\r\n              timestamp: message.timestamp\r\n            }\r\n          : chat\r\n      ).sort((a, b) => {\r\n        const timeA = new Date(`1970/01/01 ${a.timestamp}`).getTime();\r\n        const timeB = new Date(`1970/01/01 ${b.timestamp}`).getTime();\r\n        return timeB - timeA;\r\n      })\r\n    };\r\n\r\n    // Persist to localStorage\r\n    localStorage.setItem('chats', JSON.stringify(newState.chats));\r\n    localStorage.setItem('chatMessages', JSON.stringify(newState.chatMessages));\r\n\r\n    return newState;\r\n  }),\r\n  updateChat: (chatId: string, lastMessage: string, sender: string, timestamp?: string) => set((state: TaskState) => {\r\n    const currentTime = timestamp || new Date().toLocaleTimeString();\r\n    const updatedChats = state.chats.map(chat => \r\n      chat.id === chatId \r\n        ? { \r\n            ...chat, \r\n            message: lastMessage,\r\n            timestamp: currentTime\r\n          }\r\n        : chat\r\n    );\r\n\r\n    // Sort chats by timestamp (most recent first)\r\n    const sortedChats = [...updatedChats].sort((a, b) => {\r\n      const timeA = new Date(`1970/01/01 ${a.timestamp}`).getTime();\r\n      const timeB = new Date(`1970/01/01 ${b.timestamp}`).getTime();\r\n      return timeB - timeA;\r\n    });\r\n\r\n    const newState = {\r\n      ...state,\r\n      chats: sortedChats,\r\n      chatMessages: state.chatMessages // Keep existing messages\r\n    };\r\n\r\n    // Persist to localStorage\r\n    localStorage.setItem('chats', JSON.stringify(sortedChats));\r\n    localStorage.setItem('chatMessages', JSON.stringify(state.chatMessages));\r\n\r\n    return newState;\r\n  }),\r\n  getChatMessages: (chatId: string) => {\r\n    const state = get();\r\n    return state.chatMessages[chatId] || [];\r\n  },\r\n})); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}