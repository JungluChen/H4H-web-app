{"ast":null,"code":"import _objectSpread from\"C:/Users/justi/OneDrive/Desktop/EN/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{create}from'zustand';import{dummyTasks,dummyChats}from'../data/dummyData';export const useTaskStore=create(set=>({tasks:dummyTasks,chats:dummyChats,readMessages:[],addTask:newTask=>set(state=>({tasks:[_objectSpread(_objectSpread({},newTask),{},{id:String(state.tasks.length+1),status:'open'}),...state.tasks]})),addChat:newChat=>set(state=>{const existingChat=state.chats.find(chat=>chat.sender===newChat.sender&&chat.taskTitle===newChat.taskTitle);if(existingChat){return state;}return{chats:[newChat,...state.chats]};}),markChatAsRead:chatId=>set(state=>({readMessages:[...state.readMessages,chatId],chats:state.chats.map(chat=>chat.id===chatId?_objectSpread(_objectSpread({},chat),{},{unreadCount:0}):chat)}))}));","map":{"version":3,"names":["create","dummyTasks","dummyChats","useTaskStore","set","tasks","chats","readMessages","addTask","newTask","state","_objectSpread","id","String","length","status","addChat","newChat","existingChat","find","chat","sender","taskTitle","markChatAsRead","chatId","map","unreadCount"],"sources":["C:/Users/justi/OneDrive/Desktop/EN/src/store/taskStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { dummyTasks, dummyChats } from '../data/dummyData';\r\nimport { Task } from '../types';\r\n\r\ninterface Chat {\r\n  id: string;\r\n  sender: string;\r\n  taskTitle: string;\r\n  message: string;\r\n  timestamp: string;\r\n  unreadCount: number;\r\n}\r\n\r\ninterface TaskState {\r\n  tasks: Task[];\r\n  chats: Chat[];\r\n  readMessages: string[];\r\n  addTask: (task: Omit<Task, 'id'>) => void;\r\n  addChat: (chat: Chat) => void;\r\n  markChatAsRead: (chatId: string) => void;\r\n}\r\n\r\nexport const useTaskStore = create<TaskState>((set) => ({\r\n  tasks: dummyTasks,\r\n  chats: dummyChats,\r\n  readMessages: [],\r\n  addTask: (newTask) => set((state) => ({\r\n    tasks: [\r\n      {\r\n        ...newTask,\r\n        id: String(state.tasks.length + 1),\r\n        status: 'open'\r\n      },\r\n      ...state.tasks\r\n    ]\r\n  })),\r\n  addChat: (newChat) => set((state) => {\r\n    const existingChat = state.chats.find(chat => \r\n      chat.sender === newChat.sender && \r\n      chat.taskTitle === newChat.taskTitle\r\n    );\r\n    if (existingChat) {\r\n      return state;\r\n    }\r\n    return {\r\n      chats: [newChat, ...state.chats]\r\n    };\r\n  }),\r\n  markChatAsRead: (chatId: string) => set((state) => ({\r\n    readMessages: [...state.readMessages, chatId],\r\n    chats: state.chats.map(chat => \r\n      chat.id === chatId \r\n        ? { ...chat, unreadCount: 0 }\r\n        : chat\r\n    )\r\n  }))\r\n})); "],"mappings":"uHAAA,OAASA,MAAM,KAAQ,SAAS,CAChC,OAASC,UAAU,CAAEC,UAAU,KAAQ,mBAAmB,CAqB1D,MAAO,MAAM,CAAAC,YAAY,CAAGH,MAAM,CAAaI,GAAG,GAAM,CACtDC,KAAK,CAAEJ,UAAU,CACjBK,KAAK,CAAEJ,UAAU,CACjBK,YAAY,CAAE,EAAE,CAChBC,OAAO,CAAGC,OAAO,EAAKL,GAAG,CAAEM,KAAK,GAAM,CACpCL,KAAK,CAAE,CAAAM,aAAA,CAAAA,aAAA,IAEAF,OAAO,MACVG,EAAE,CAAEC,MAAM,CAACH,KAAK,CAACL,KAAK,CAACS,MAAM,CAAG,CAAC,CAAC,CAClCC,MAAM,CAAE,MAAM,GAEhB,GAAGL,KAAK,CAACL,KAAK,CAElB,CAAC,CAAC,CAAC,CACHW,OAAO,CAAGC,OAAO,EAAKb,GAAG,CAAEM,KAAK,EAAK,CACnC,KAAM,CAAAQ,YAAY,CAAGR,KAAK,CAACJ,KAAK,CAACa,IAAI,CAACC,IAAI,EACxCA,IAAI,CAACC,MAAM,GAAKJ,OAAO,CAACI,MAAM,EAC9BD,IAAI,CAACE,SAAS,GAAKL,OAAO,CAACK,SAC7B,CAAC,CACD,GAAIJ,YAAY,CAAE,CAChB,MAAO,CAAAR,KAAK,CACd,CACA,MAAO,CACLJ,KAAK,CAAE,CAACW,OAAO,CAAE,GAAGP,KAAK,CAACJ,KAAK,CACjC,CAAC,CACH,CAAC,CAAC,CACFiB,cAAc,CAAGC,MAAc,EAAKpB,GAAG,CAAEM,KAAK,GAAM,CAClDH,YAAY,CAAE,CAAC,GAAGG,KAAK,CAACH,YAAY,CAAEiB,MAAM,CAAC,CAC7ClB,KAAK,CAAEI,KAAK,CAACJ,KAAK,CAACmB,GAAG,CAACL,IAAI,EACzBA,IAAI,CAACR,EAAE,GAAKY,MAAM,CAAAb,aAAA,CAAAA,aAAA,IACTS,IAAI,MAAEM,WAAW,CAAE,CAAC,GACzBN,IACN,CACF,CAAC,CAAC,CACJ,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}