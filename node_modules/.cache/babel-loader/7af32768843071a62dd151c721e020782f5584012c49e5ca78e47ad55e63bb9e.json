{"ast":null,"code":"import { create } from 'zustand';\nimport { dummyTasks } from '../data/dummyData';\n// Add dummy profile data\nconst dummyProfile = {\n  name: \"John Doe\",\n  wallet: 6000,\n  achievements: [{\n    id: \"1\",\n    title: \"First Task Complete\",\n    description: \"Completed your first task\",\n    progress: 100,\n    reward: 50,\n    icon: \"🎯\"\n  }, {\n    id: \"2\",\n    title: \"Super Helper\",\n    description: \"Helped 10 people\",\n    progress: 80,\n    reward: 100,\n    icon: \"⭐\"\n  }, {\n    id: \"3\",\n    title: \"Quick Responder\",\n    description: \"Responded to 5 tasks within an hour\",\n    progress: 60,\n    reward: 75,\n    icon: \"⚡\"\n  }],\n  taskHistory: dummyTasks.slice(0, 3),\n  rating: 4.8\n};\n\n// Add formatTime helper function\nconst formatTime = date => {\n  return date.toLocaleString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  });\n};\n\n// Helper function to convert timestamp to Date object\nconst parseTimestamp = timestamp => {\n  const [monthDay, time] = timestamp.split(', ');\n  const [month, day] = monthDay.split(' ');\n  const currentYear = new Date().getFullYear();\n  return new Date(`${month} ${day}, ${currentYear} ${time}`);\n};\nexport const useTaskStore = create((set, get) => ({\n  tasks: dummyTasks,\n  chats: [],\n  readMessages: [],\n  profile: dummyProfile,\n  chatMessages: {},\n  addTask: newTask => set(state => ({\n    tasks: [{\n      ...newTask,\n      id: String(state.tasks.length + 1),\n      status: 'open'\n    }, ...state.tasks]\n  })),\n  addChat: newChat => {\n    let createdChat = newChat;\n    set(state => {\n      const existingChat = state.chats.find(chat => chat.sender === newChat.sender && chat.taskTitle === newChat.taskTitle);\n      if (existingChat) {\n        createdChat = existingChat;\n        return {\n          ...state,\n          // Keep the existing chat in the chats array\n          chats: state.chats,\n          chatMessages: {\n            ...state.chatMessages,\n            [existingChat.id]: state.chatMessages[existingChat.id] || []\n          }\n        };\n      }\n\n      // For new chat\n      const updatedChats = [newChat, ...state.chats];\n      return {\n        ...state,\n        chats: updatedChats,\n        chatMessages: {\n          ...state.chatMessages,\n          [newChat.id]: []\n        }\n      };\n    });\n\n    // Log state for debugging\n    console.log('Current store state:', get());\n    return {\n      chats: get().chats,\n      createdChat\n    };\n  },\n  addMessage: (chatId, message) => set(state => {\n    const existingMessages = state.chatMessages[chatId] || [];\n    const updatedMessages = [...existingMessages, message];\n\n    // Make sure the chat exists in chats array\n    const chatExists = state.chats.some(chat => chat.id === chatId);\n    const chat = state.chats.find(chat => chat.id === chatId);\n    if (!chatExists && chat) {\n      console.error('Chat not found in chats array:', chatId);\n      return state;\n    }\n    const newState = {\n      ...state,\n      chatMessages: {\n        ...state.chatMessages,\n        [chatId]: updatedMessages\n      },\n      chats: state.chats.map(chat => chat.id === chatId ? {\n        ...chat,\n        message: message.message,\n        timestamp: message.timestamp\n      } : chat).sort((a, b) => {\n        const timeA = parseTimestamp(a.timestamp).getTime();\n        const timeB = parseTimestamp(b.timestamp).getTime();\n        return timeB - timeA;\n      })\n    };\n\n    // Log state for debugging\n    console.log('After adding message:', {\n      chatId,\n      message,\n      messages: newState.chatMessages[chatId],\n      chats: newState.chats\n    });\n    return newState;\n  }),\n  updateChat: (chatId, lastMessage, sender, timestamp) => set(state => {\n    const currentTime = timestamp || formatTime(new Date());\n    const updatedChats = state.chats.map(chat => chat.id === chatId ? {\n      ...chat,\n      message: lastMessage,\n      timestamp: currentTime\n    } : chat).sort((a, b) => {\n      const timeA = parseTimestamp(a.timestamp).getTime();\n      const timeB = parseTimestamp(b.timestamp).getTime();\n      return timeB - timeA;\n    });\n    return {\n      ...state,\n      chats: updatedChats,\n      chatMessages: state.chatMessages\n    };\n  }),\n  markChatAsRead: chatId => set(state => ({\n    readMessages: [...state.readMessages, chatId],\n    chats: state.chats.map(chat => chat.id === chatId ? {\n      ...chat,\n      unreadCount: 0\n    } : chat)\n  })),\n  getChatMessages: chatId => {\n    const state = get();\n    const messages = state.chatMessages[chatId] || [];\n\n    // For debugging\n    console.log('Getting messages for chat:', chatId, messages);\n    return messages;\n  }\n}));","map":{"version":3,"names":["create","dummyTasks","dummyProfile","name","wallet","achievements","id","title","description","progress","reward","icon","taskHistory","slice","rating","formatTime","date","toLocaleString","month","day","hour","minute","hour12","parseTimestamp","timestamp","monthDay","time","split","currentYear","Date","getFullYear","useTaskStore","set","get","tasks","chats","readMessages","profile","chatMessages","addTask","newTask","state","String","length","status","addChat","newChat","createdChat","existingChat","find","chat","sender","taskTitle","updatedChats","console","log","addMessage","chatId","message","existingMessages","updatedMessages","chatExists","some","error","newState","map","sort","a","b","timeA","getTime","timeB","messages","updateChat","lastMessage","currentTime","markChatAsRead","unreadCount","getChatMessages"],"sources":["C:/Users/5x/Downloads/EN/src/store/taskStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { dummyTasks } from '../data/dummyData';\r\nimport { Task, Chat } from '../types';\r\n\r\ninterface Achievement {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  progress: number;\r\n  reward: number;\r\n  icon: string;\r\n}\r\n\r\ninterface Profile {\r\n  name: string;\r\n  wallet: number;\r\n  achievements: Achievement[];\r\n  taskHistory: Task[];\r\n  rating: number;\r\n}\r\n\r\ninterface TaskState {\r\n  tasks: Task[];\r\n  chats: Chat[];\r\n  readMessages: string[];\r\n  profile: Profile;\r\n  chatMessages: Record<string, Chat[]>;\r\n  addTask: (task: Omit<Task, 'id'>) => void;\r\n  addChat: (chat: Chat) => { chats: Chat[], createdChat: Chat };\r\n  markChatAsRead: (chatId: string) => void;\r\n  addMessage: (chatId: string, message: Chat) => void;\r\n  updateChat: (chatId: string, lastMessage: string, sender: string, timestamp?: string) => void;\r\n  getChatMessages: (chatId: string) => Chat[];\r\n}\r\n\r\n// Add dummy profile data\r\nconst dummyProfile: Profile = {\r\n  name: \"John Doe\",\r\n  wallet: 6000,\r\n  achievements: [\r\n    {\r\n      id: \"1\",\r\n      title: \"First Task Complete\",\r\n      description: \"Completed your first task\",\r\n      progress: 100,\r\n      reward: 50,\r\n      icon: \"🎯\"\r\n    },\r\n    {\r\n      id: \"2\",\r\n      title: \"Super Helper\",\r\n      description: \"Helped 10 people\",\r\n      progress: 80,\r\n      reward: 100,\r\n      icon: \"⭐\"\r\n    },\r\n    {\r\n      id: \"3\",\r\n      title: \"Quick Responder\",\r\n      description: \"Responded to 5 tasks within an hour\",\r\n      progress: 60,\r\n      reward: 75,\r\n      icon: \"⚡\"\r\n    }\r\n  ],\r\n  taskHistory: dummyTasks.slice(0, 3),\r\n  rating: 4.8\r\n};\r\n\r\n// Add formatTime helper function\r\nconst formatTime = (date: Date) => {\r\n  return date.toLocaleString('en-US', {\r\n    month: 'short',\r\n    day: 'numeric',\r\n    hour: 'numeric',\r\n    minute: '2-digit',\r\n    hour12: true\r\n  });\r\n};\r\n\r\n// Helper function to convert timestamp to Date object\r\nconst parseTimestamp = (timestamp: string) => {\r\n  const [monthDay, time] = timestamp.split(', ');\r\n  const [month, day] = monthDay.split(' ');\r\n  const currentYear = new Date().getFullYear();\r\n  return new Date(`${month} ${day}, ${currentYear} ${time}`);\r\n};\r\n\r\nexport const useTaskStore = create<TaskState>((set, get) => ({\r\n  tasks: dummyTasks,\r\n  chats: [],\r\n  readMessages: [],\r\n  profile: dummyProfile,\r\n  chatMessages: {},\r\n\r\n  addTask: (newTask) => set((state: TaskState) => ({\r\n    tasks: [\r\n      {\r\n        ...newTask,\r\n        id: String(state.tasks.length + 1),\r\n        status: 'open'\r\n      },\r\n      ...state.tasks\r\n    ]\r\n  })),\r\n\r\n  addChat: (newChat: Chat) => {\r\n    let createdChat: Chat = newChat;\r\n    \r\n    set((state: TaskState) => {\r\n      const existingChat = state.chats.find(chat => \r\n        chat.sender === newChat.sender && \r\n        chat.taskTitle === newChat.taskTitle\r\n      );\r\n      \r\n      if (existingChat) {\r\n        createdChat = existingChat;\r\n        return {\r\n          ...state,\r\n          // Keep the existing chat in the chats array\r\n          chats: state.chats,\r\n          chatMessages: {\r\n            ...state.chatMessages,\r\n            [existingChat.id]: state.chatMessages[existingChat.id] || []\r\n          }\r\n        };\r\n      }\r\n      \r\n      // For new chat\r\n      const updatedChats = [newChat, ...state.chats];\r\n      return {\r\n        ...state,\r\n        chats: updatedChats,\r\n        chatMessages: {\r\n          ...state.chatMessages,\r\n          [newChat.id]: []\r\n        }\r\n      };\r\n    });\r\n\r\n    // Log state for debugging\r\n    console.log('Current store state:', get());\r\n    return { chats: get().chats, createdChat };\r\n  },\r\n\r\n  addMessage: (chatId: string, message: Chat) => set((state: TaskState) => {\r\n    const existingMessages = state.chatMessages[chatId] || [];\r\n    const updatedMessages = [...existingMessages, message];\r\n    \r\n    // Make sure the chat exists in chats array\r\n    const chatExists = state.chats.some(chat => chat.id === chatId);\r\n    const chat = state.chats.find(chat => chat.id === chatId);\r\n    \r\n    if (!chatExists && chat) {\r\n      console.error('Chat not found in chats array:', chatId);\r\n      return state;\r\n    }\r\n    \r\n    const newState = {\r\n      ...state,\r\n      chatMessages: {\r\n        ...state.chatMessages,\r\n        [chatId]: updatedMessages\r\n      },\r\n      chats: state.chats.map(chat => \r\n        chat.id === chatId \r\n          ? { \r\n              ...chat, \r\n              message: message.message,\r\n              timestamp: message.timestamp\r\n            }\r\n          : chat\r\n      ).sort((a, b) => {\r\n        const timeA = parseTimestamp(a.timestamp).getTime();\r\n        const timeB = parseTimestamp(b.timestamp).getTime();\r\n        return timeB - timeA;\r\n      })\r\n    };\r\n\r\n    // Log state for debugging\r\n    console.log('After adding message:', {\r\n      chatId,\r\n      message,\r\n      messages: newState.chatMessages[chatId],\r\n      chats: newState.chats\r\n    });\r\n    \r\n    return newState;\r\n  }),\r\n\r\n  updateChat: (chatId: string, lastMessage: string, sender: string, timestamp?: string) => set((state: TaskState) => {\r\n    const currentTime = timestamp || formatTime(new Date());\r\n    const updatedChats = state.chats.map(chat => \r\n      chat.id === chatId \r\n        ? { \r\n            ...chat, \r\n            message: lastMessage,\r\n            timestamp: currentTime\r\n          }\r\n        : chat\r\n    ).sort((a, b) => {\r\n      const timeA = parseTimestamp(a.timestamp).getTime();\r\n      const timeB = parseTimestamp(b.timestamp).getTime();\r\n      return timeB - timeA;\r\n    });\r\n\r\n    return {\r\n      ...state,\r\n      chats: updatedChats,\r\n      chatMessages: state.chatMessages\r\n    };\r\n  }),\r\n\r\n  markChatAsRead: (chatId: string) => set((state: TaskState) => ({\r\n    readMessages: [...state.readMessages, chatId],\r\n    chats: state.chats.map(chat => \r\n      chat.id === chatId \r\n        ? { ...chat, unreadCount: 0 }\r\n        : chat\r\n    )\r\n  })),\r\n\r\n  getChatMessages: (chatId: string) => {\r\n    const state = get();\r\n    const messages = state.chatMessages[chatId] || [];\r\n    \r\n    // For debugging\r\n    console.log('Getting messages for chat:', chatId, messages);\r\n    \r\n    return messages;\r\n  },\r\n})); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}