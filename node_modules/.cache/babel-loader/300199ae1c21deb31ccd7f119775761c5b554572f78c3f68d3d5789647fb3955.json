{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\justi\\\\OneDrive\\\\Desktop\\\\EN\\\\src\\\\components\\\\LocationPicker.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LocationPicker = ({\n  onLocationSelect\n}) => {\n  _s();\n  const [selectedPosition, setSelectedPosition] = useState(null);\n  const handleMapClick = e => {\n    if (e.latLng) {\n      const position = {\n        lat: e.latLng.lat(),\n        lng: e.latLng.lng()\n      };\n      setSelectedPosition(position);\n      onLocationSelect(`${position.lat}, ${position.lng}`);\n    }\n  };\n  const handleGetCurrentLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        setSelectedPosition(pos);\n        onLocationSelect(`${pos.lat}, ${pos.lng}`);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleGetCurrentLocation,\n      style: {\n        width: '100%',\n        padding: '10px',\n        backgroundColor: '#333',\n        border: 'none',\n        borderRadius: '5px',\n        color: 'white',\n        marginBottom: '10px',\n        cursor: 'pointer'\n      },\n      children: \"\\uD83D\\uDCCD Use Current Location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: \"YOUR_GOOGLE_MAPS_API_KEY\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: {\n          width: '100%',\n          height: '300px',\n          borderRadius: '10px'\n        },\n        center: selectedPosition || {\n          lat: 0,\n          lng: 0\n        },\n        zoom: 15,\n        onClick: handleMapClick,\n        children: selectedPosition && /*#__PURE__*/_jsxDEV(Marker, {\n          position: selectedPosition\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 32\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationPicker, \"xv+/3zoT5l1/iXKgHAN2OQ/fCdE=\");\n_c = LocationPicker;\nexport default LocationPicker;\nvar _c;\n$RefreshReg$(_c, \"LocationPicker\");","map":{"version":3,"names":["React","useState","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","LocationPicker","onLocationSelect","_s","selectedPosition","setSelectedPosition","handleMapClick","e","latLng","position","lat","lng","handleGetCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","children","type","onClick","style","width","padding","backgroundColor","border","borderRadius","color","marginBottom","cursor","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","mapContainerStyle","height","center","zoom","_c","$RefreshReg$"],"sources":["C:/Users/justi/OneDrive/Desktop/EN/src/components/LocationPicker.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\r\n\r\ninterface LocationPickerProps {\r\n  onLocationSelect: (location: string) => void;\r\n}\r\n\r\nconst LocationPicker = ({ onLocationSelect }: LocationPickerProps) => {\r\n  const [selectedPosition, setSelectedPosition] = useState<google.maps.LatLngLiteral | null>(null);\r\n\r\n  const handleMapClick = (e: google.maps.MapMouseEvent) => {\r\n    if (e.latLng) {\r\n      const position = {\r\n        lat: e.latLng.lat(),\r\n        lng: e.latLng.lng()\r\n      };\r\n      setSelectedPosition(position);\r\n      onLocationSelect(`${position.lat}, ${position.lng}`);\r\n    }\r\n  };\r\n\r\n  const handleGetCurrentLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        const pos = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        };\r\n        setSelectedPosition(pos);\r\n        onLocationSelect(`${pos.lat}, ${pos.lng}`);\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        type=\"button\"\r\n        onClick={handleGetCurrentLocation}\r\n        style={{\r\n          width: '100%',\r\n          padding: '10px',\r\n          backgroundColor: '#333',\r\n          border: 'none',\r\n          borderRadius: '5px',\r\n          color: 'white',\r\n          marginBottom: '10px',\r\n          cursor: 'pointer'\r\n        }}\r\n      >\r\n        üìç Use Current Location\r\n      </button>\r\n      \r\n      <LoadScript googleMapsApiKey=\"YOUR_GOOGLE_MAPS_API_KEY\">\r\n        <GoogleMap\r\n          mapContainerStyle={{\r\n            width: '100%',\r\n            height: '300px',\r\n            borderRadius: '10px'\r\n          }}\r\n          center={selectedPosition || { lat: 0, lng: 0 }}\r\n          zoom={15}\r\n          onClick={handleMapClick}\r\n        >\r\n          {selectedPosition && <Marker position={selectedPosition} />}\r\n        </GoogleMap>\r\n      </LoadScript>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LocationPicker; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}