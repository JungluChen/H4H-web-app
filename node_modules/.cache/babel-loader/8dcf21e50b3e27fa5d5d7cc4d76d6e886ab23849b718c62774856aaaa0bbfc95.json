{"ast":null,"code":"import { create } from 'zustand';\nimport { dummyTasks, dummyChats } from '../data/dummyData';\nexport const useTaskStore = create(set => ({\n  tasks: dummyTasks,\n  chats: dummyChats,\n  addTask: newTask => set(state => ({\n    tasks: [{\n      ...newTask,\n      id: String(state.tasks.length + 1),\n      status: 'open'\n    }, ...state.tasks]\n  })),\n  addChat: newChat => set(state => {\n    // Check if chat already exists\n    const existingChat = state.chats.find(chat => chat.id === newChat.id);\n    if (existingChat) {\n      return state; // Don't add duplicate chats\n    }\n\n    // Add new chat to the beginning of the list\n    return {\n      chats: [newChat, ...state.chats]\n    };\n  }),\n  updateChat: (chatId, updates) => set(state => ({\n    chats: state.chats.map(chat => chat.id === chatId ? {\n      ...chat,\n      ...updates\n    } : chat)\n  }))\n}));","map":{"version":3,"names":["create","dummyTasks","dummyChats","useTaskStore","set","tasks","chats","addTask","newTask","state","id","String","length","status","addChat","newChat","existingChat","find","chat","updateChat","chatId","updates","map"],"sources":["C:/Users/justi/OneDrive/Desktop/EN/src/store/taskStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { dummyTasks, dummyChats } from '../data/dummyData';\r\nimport { Task } from '../types';\r\n\r\ninterface Chat {\r\n  id: string;\r\n  sender: string;\r\n  taskTitle: string;\r\n  message: string;\r\n  timestamp: string;\r\n  unreadCount: number;\r\n}\r\n\r\ninterface TaskState {\r\n  tasks: Task[];\r\n  chats: Chat[];\r\n  addTask: (task: Omit<Task, 'id'>) => void;\r\n  addChat: (chat: Chat) => void;\r\n  updateChat: (chatId: string, updates: Partial<Chat>) => void;\r\n}\r\n\r\nexport const useTaskStore = create<TaskState>((set) => ({\r\n  tasks: dummyTasks,\r\n  chats: dummyChats,\r\n  addTask: (newTask) => set((state) => ({\r\n    tasks: [\r\n      {\r\n        ...newTask,\r\n        id: String(state.tasks.length + 1),\r\n        status: 'open'\r\n      },\r\n      ...state.tasks\r\n    ]\r\n  })),\r\n  addChat: (newChat) => set((state) => {\r\n    // Check if chat already exists\r\n    const existingChat = state.chats.find(chat => chat.id === newChat.id);\r\n    if (existingChat) {\r\n      return state; // Don't add duplicate chats\r\n    }\r\n    \r\n    // Add new chat to the beginning of the list\r\n    return {\r\n      chats: [newChat, ...state.chats]\r\n    };\r\n  }),\r\n  updateChat: (chatId, updates) => set((state) => ({\r\n    chats: state.chats.map(chat => \r\n      chat.id === chatId ? { ...chat, ...updates } : chat\r\n    )\r\n  }))\r\n})); "],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,UAAU,EAAEC,UAAU,QAAQ,mBAAmB;AAoB1D,OAAO,MAAMC,YAAY,GAAGH,MAAM,CAAaI,GAAG,KAAM;EACtDC,KAAK,EAAEJ,UAAU;EACjBK,KAAK,EAAEJ,UAAU;EACjBK,OAAO,EAAGC,OAAO,IAAKJ,GAAG,CAAEK,KAAK,KAAM;IACpCJ,KAAK,EAAE,CACL;MACE,GAAGG,OAAO;MACVE,EAAE,EAAEC,MAAM,CAACF,KAAK,CAACJ,KAAK,CAACO,MAAM,GAAG,CAAC,CAAC;MAClCC,MAAM,EAAE;IACV,CAAC,EACD,GAAGJ,KAAK,CAACJ,KAAK;EAElB,CAAC,CAAC,CAAC;EACHS,OAAO,EAAGC,OAAO,IAAKX,GAAG,CAAEK,KAAK,IAAK;IACnC;IACA,MAAMO,YAAY,GAAGP,KAAK,CAACH,KAAK,CAACW,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACR,EAAE,KAAKK,OAAO,CAACL,EAAE,CAAC;IACrE,IAAIM,YAAY,EAAE;MAChB,OAAOP,KAAK,CAAC,CAAC;IAChB;;IAEA;IACA,OAAO;MACLH,KAAK,EAAE,CAACS,OAAO,EAAE,GAAGN,KAAK,CAACH,KAAK;IACjC,CAAC;EACH,CAAC,CAAC;EACFa,UAAU,EAAEA,CAACC,MAAM,EAAEC,OAAO,KAAKjB,GAAG,CAAEK,KAAK,KAAM;IAC/CH,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACgB,GAAG,CAACJ,IAAI,IACzBA,IAAI,CAACR,EAAE,KAAKU,MAAM,GAAG;MAAE,GAAGF,IAAI;MAAE,GAAGG;IAAQ,CAAC,GAAGH,IACjD;EACF,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}